package permadb;

import javax.swing.JFileChooser;
import java.util.List;
import java.sql.*;
import java.util.ArrayList;

/**
 *
 * @author Steve Rich
 */
public class GUI extends javax.swing.JFrame {

    Connection SQL;

    boolean first = true; // ugh, figure a way aroud this global
    
    /*
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        initLists();
        try {
            SQL = openConnection();
        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        n2Group = new javax.swing.ButtonGroup();
        mineralGroup = new javax.swing.ButtonGroup();
        invertGroup = new javax.swing.ButtonGroup();
        groundCoverGroup = new javax.swing.ButtonGroup();
        poisonGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        zoneList = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        lightList = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        moistureList = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        n2YesBTN = new javax.swing.JCheckBox();
        n2NoBTN = new javax.swing.JCheckBox();
        mineralYesBTN = new javax.swing.JCheckBox();
        mineralNoBTN = new javax.swing.JCheckBox();
        invertYesBTN = new javax.swing.JCheckBox();
        invertNoBTN = new javax.swing.JCheckBox();
        groundCoverYesBTN = new javax.swing.JCheckBox();
        groundCoverNoBTN = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        poisonYesBTN = new javax.swing.JCheckBox();
        poisonNoBTN = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        habitatList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resultList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(resultList);

        zoneList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                zoneListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(zoneList);

        lightList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lightListValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(lightList);

        moistureList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                moistureListValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(moistureList);

        jLabel5.setText("Zone");

        jLabel6.setText("Light");

        jLabel7.setText("Moisture");

        jLabel1.setText("Yes");

        jLabel3.setText("No");

        jLabel4.setText("N2 Fixer");

        n2Group.add(n2YesBTN);
        n2YesBTN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                n2YesBTNStateChanged(evt);
            }
        });

        n2Group.add(n2NoBTN);
        n2NoBTN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                n2NoBTNStateChanged(evt);
            }
        });

        mineralGroup.add(mineralYesBTN);
        mineralYesBTN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mineralYesBTNStateChanged(evt);
            }
        });

        mineralGroup.add(mineralNoBTN);
        mineralNoBTN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mineralNoBTNStateChanged(evt);
            }
        });

        invertGroup.add(invertYesBTN);
        invertYesBTN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                invertYesBTNStateChanged(evt);
            }
        });

        invertGroup.add(invertNoBTN);
        invertNoBTN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                invertNoBTNStateChanged(evt);
            }
        });

        groundCoverGroup.add(groundCoverYesBTN);
        groundCoverYesBTN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                groundCoverYesBTNStateChanged(evt);
            }
        });

        groundCoverGroup.add(groundCoverNoBTN);
        groundCoverNoBTN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                groundCoverNoBTNStateChanged(evt);
            }
        });

        jLabel8.setText("Mineral Accum");

        jLabel9.setText("Invert Shelter");

        jLabel10.setText("Ground Cover");

        poisonGroup.add(poisonYesBTN);
        poisonYesBTN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                poisonYesBTNStateChanged(evt);
            }
        });

        poisonGroup.add(poisonNoBTN);
        poisonNoBTN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                poisonNoBTNStateChanged(evt);
            }
        });

        jLabel11.setText("Poison");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(n2YesBTN))
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(n2NoBTN)
                            .addComponent(jLabel3)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mineralYesBTN)
                        .addGap(18, 18, 18)
                        .addComponent(mineralNoBTN))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(invertYesBTN)
                        .addGap(18, 18, 18)
                        .addComponent(invertNoBTN))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(poisonYesBTN)
                                .addGap(18, 18, 18)
                                .addComponent(poisonNoBTN))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(groundCoverYesBTN)
                                .addGap(18, 18, 18)
                                .addComponent(groundCoverNoBTN)))))
                .addGap(0, 13, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(n2YesBTN)
                            .addComponent(n2NoBTN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mineralYesBTN)
                            .addComponent(mineralNoBTN)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(invertYesBTN)
                            .addComponent(invertNoBTN)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(groundCoverYesBTN)
                            .addComponent(groundCoverNoBTN)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(poisonYesBTN)
                            .addComponent(poisonNoBTN)
                            .addComponent(jLabel11))))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Zone, Light, Moisture", jPanel2);

        habitatList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                habitatListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(habitatList);

        jLabel2.setText("Habitat");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(417, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Habitat, Region", jPanel3);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 525, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("more more params", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void habitatListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_habitatListValueChanged
        updateResults();
    }//GEN-LAST:event_habitatListValueChanged

    private void moistureListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_moistureListValueChanged
        updateResults();
    }//GEN-LAST:event_moistureListValueChanged

    private void lightListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lightListValueChanged
        updateResults();
    }//GEN-LAST:event_lightListValueChanged

    private void zoneListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_zoneListValueChanged
        updateResults();
    }//GEN-LAST:event_zoneListValueChanged

    private void n2YesBTNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_n2YesBTNStateChanged
        updateResults();
    }//GEN-LAST:event_n2YesBTNStateChanged

    private void n2NoBTNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_n2NoBTNStateChanged
        updateResults();
    }//GEN-LAST:event_n2NoBTNStateChanged

    private void mineralYesBTNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mineralYesBTNStateChanged
        updateResults();
    }//GEN-LAST:event_mineralYesBTNStateChanged

    private void mineralNoBTNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mineralNoBTNStateChanged
        updateResults();
    }//GEN-LAST:event_mineralNoBTNStateChanged

    private void invertYesBTNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_invertYesBTNStateChanged
        updateResults();
    }//GEN-LAST:event_invertYesBTNStateChanged

    private void invertNoBTNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_invertNoBTNStateChanged
        updateResults();
    }//GEN-LAST:event_invertNoBTNStateChanged

    private void groundCoverYesBTNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_groundCoverYesBTNStateChanged
        updateResults();
    }//GEN-LAST:event_groundCoverYesBTNStateChanged

    private void groundCoverNoBTNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_groundCoverNoBTNStateChanged
        updateResults();
    }//GEN-LAST:event_groundCoverNoBTNStateChanged

    private void poisonYesBTNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_poisonYesBTNStateChanged
        updateResults();
    }//GEN-LAST:event_poisonYesBTNStateChanged

    private void poisonNoBTNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_poisonNoBTNStateChanged
        updateResults();
    }//GEN-LAST:event_poisonNoBTNStateChanged

    void initLists() {
        zoneList.setListData(new String[]{"2", "3", "4", "5", "6", "7", "8"});
        lightList.setListData(new String[]{"Full Sun", "Partial Shade", "Shade"});
        moistureList.setListData(new String[]{"Xeric", "Mesic", "Hydric"});
        habitatList.setListData(new String[]{"Prairies", "Gaps/Clearings", "Open Woods", "Forest", "Disturbed", "Meadows", "Old Fields", "Edges", "Conifer Forest", "Thickets"});
    }

    // Main event updater, calls and executes new query on each button/checkbox event
    void updateResults() {
        try {
            List<String> output = new ArrayList<>();
            String query = getParams();
            PreparedStatement SQLquery = SQL.prepareStatement(query);
            ResultSet results = SQLquery.executeQuery();
            while (results.next()) {
                output.add(results.getString("genus") + " " + results.getString("species"));
            }
            String[] listData = new String[]{};
            listData = output.toArray(listData);
            resultList.setListData(listData);
        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    // Handles each value, assigns "Where" if it's the first in the list, else "And"
    StringBuilder appendParams(StringBuilder input, String[] inputArray) {
        for (String value : inputArray) {
            input.append(getConditional()).append(value);
        }
        return input;
    }

    // Struct: input[0] contains all tables and joins, input[1] contains all conditionals
    StringBuilder[] appendParamsArr(StringBuilder input[], String[] inputArray, String table) {
        int counter = 0;
        for (String join : inputArray) {
            input[0].append(" INNER JOIN " + table + " " + table + counter + " on plants.plantid = " + table + counter + ".plantid");
            if (first) {
                input[1].append(" WHERE " + table + counter).append(join);
                first = false;
            } else {
                input[1].append(" AND " + table + counter).append(join);
            }
            counter++;
        }
        return input;
    }

    // Polls each list and all check boxes to build the search query
    String getParams() {
        first = true; // reset global, determines where/or in query
        String nameType = "genus, species ";
        StringBuilder query = new StringBuilder("Select " + nameType + " from plants ");

        StringBuilder[] queryArr = new StringBuilder[2];
        queryArr[0] = query;
        queryArr[1] = new StringBuilder();

        queryArr = appendParamsArr(queryArr, getListParams(lightList, "light"), "light");
        queryArr = appendParamsArr(queryArr, getListParams(zoneList, "zone"), "zone");
        queryArr = appendParamsArr(queryArr, getListParams(moistureList, "moisture"), "moisture");
        queryArr = appendParamsArr(queryArr, getListParams(habitatList, "habitat"), "habitat");

        query.append(getCheckBoxParams());

        System.out.println(queryArr[0].toString() + " " + queryArr[1].toString());
        return queryArr[0].toString() + " " + queryArr[1].toString();
    }

    // Handles all of the checkboxes for plant tables, only conditionals so returns String
    String getCheckBoxParams() {
        StringBuilder output = new StringBuilder();

        if (n2YesBTN.isSelected()) {
            output.append(getConditional()).append("plants.n2Fixer = 1 ");
        } else if (n2NoBTN.isSelected()) {
            output.append(getConditional()).append("plants.n2Fixer = 0 ");
        }

        if (mineralYesBTN.isSelected()) {
            output.append(getConditional()).append("plants.mineralAccum = 1 ");
        } else if (mineralNoBTN.isSelected()) {
            output.append(getConditional()).append("plants.mineralAccum = 0 ");
        }

        if (invertYesBTN.isSelected()) {
            output.append(getConditional()).append("plants.invertShelter = 1 ");
        } else if (invertNoBTN.isSelected()) {
            output.append(getConditional()).append("plants.invertShelter = 0 ");
        }

        if (groundCoverYesBTN.isSelected()) {
            output.append(getConditional()).append("plants.groundCover = 1 ");
        } else if (groundCoverNoBTN.isSelected()) {
            output.append(getConditional()).append("plants.groundCover = 0 ");
        }

        if (poisonYesBTN.isSelected()) {
            output.append(getConditional()).append("plants.poison = 1 ");
        } else if (poisonNoBTN.isSelected()) {
            output.append(getConditional()).append("plants.poison = 0 ");
        }

        return output.toString();
    }

    // Returns and/where depending on status of global boolean 'first'
    String getConditional() {
        String output = " AND ";
        if (first) {
            output = " WHERE ";
            first = false;
        }
        return output;
    }

    // Dynamically retrieves list contents, works when the list query match the db values
    String[] getListParams(javax.swing.JList<String> inputList, String table) {
        int listSize = inputList.getModel().getSize();
        System.out.println("List size: " + listSize);
        String[] listContents = new String[listSize];
        for (int i = 0; i < listSize; i++) {
            System.out.println(inputList.getModel().getElementAt(i));
            listContents[i] = (inputList.getModel().getElementAt(i));
        }

        int[] listIndex = inputList.getSelectedIndices();
        String[] output = new String[listIndex.length];
        for (int i = 0; i < listIndex.length; i++) {
            output[i] = "." + table + "= '" + listContents[listIndex[i]] + "'";
        }
        return output;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    Connection openConnection(String database) throws SQLException {
        String url = "jdbc:sqlite:" + database;
        return DriverManager.getConnection(url);
    }

    Connection openConnection() throws SQLException {
        // String url = "jdbc:sqlite:" + database;
        String url = "jdbc:sqlite::resource:permaDB.db";
        return DriverManager.getConnection(url);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup groundCoverGroup;
    private javax.swing.JCheckBox groundCoverNoBTN;
    private javax.swing.JCheckBox groundCoverYesBTN;
    private javax.swing.JList<String> habitatList;
    private javax.swing.ButtonGroup invertGroup;
    private javax.swing.JCheckBox invertNoBTN;
    private javax.swing.JCheckBox invertYesBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> lightList;
    private javax.swing.ButtonGroup mineralGroup;
    private javax.swing.JCheckBox mineralNoBTN;
    private javax.swing.JCheckBox mineralYesBTN;
    private javax.swing.JList<String> moistureList;
    private javax.swing.ButtonGroup n2Group;
    private javax.swing.JCheckBox n2NoBTN;
    private javax.swing.JCheckBox n2YesBTN;
    private javax.swing.ButtonGroup poisonGroup;
    private javax.swing.JCheckBox poisonNoBTN;
    private javax.swing.JCheckBox poisonYesBTN;
    private javax.swing.JList<String> resultList;
    private javax.swing.JList<String> zoneList;
    // End of variables declaration//GEN-END:variables
}
